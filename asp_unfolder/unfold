#!/usr/bin/python
from StringIO import StringIO
from itertools import combinations
import sys, re

# Petri net data structures
class Node(object):
    def __init__(self, id, name, pre, post, ra):
        self.id = id
        self.name = name
        self.pre = pre
        self.post = post
        self.ra = ra

    def __extra__(self):
        return ''

    def __repr__(self):
        return '%s(id: %s, name: %s, pre: %s, post: %s, ra: %s%s)' % (
            self.__class__.__name__,
            self.id,
            self.name,
            map(lambda x: x.id, self.pre),
            map(lambda x: x.id, self.post),
            map(lambda x: x.id, self.ra),
            self.__extra__()
            )

class Place(Node):
    def __init__(self, id, name, pre, post, ra, marking):
        Node.__init__(self, id, name, pre, post, ra)
        self.marking = marking

    def __extra__(self):
        return ', marking: %s' % self.marking

class Trans(Node):
    def __init__(self, id, name, pre, post, ra, cutoff = False):
        Node.__init__(self, id, name, pre, post, ra)
        self.cutoff = cutoff

# Net definition and parsing
class Net(object):
    def __init__(self, places = None, transitions = None, fhan=None):
        self.places = places
        self.transitions = transitions
        if fhan != None:
            self.parse(fhan)

    def parse(self, handler):
        # Possible parser states
        (STATE_PREAMBLE, STATE_PLACE, STATE_TRANS,
         STATE_TP, STATE_PT, STATE_RA, STATE_IGNORE) = range(0,7)

        state = STATE_PREAMBLE
        next_place_id = 1
        next_trans_id = 1
        numquote = '"0123456789'
        
        P = {}
        T = {}
        for line in handler:
            if state == STATE_PREAMBLE:
                if line == "PL\n":
                    state = STATE_PLACE

            elif state == STATE_PLACE:
                if line == "TR\n":
                    state = STATE_TRANS
                elif line[0] in numquote:
                    tokens = line.split('"')
                    if tokens[0] == '':
                        place_id = next_place_id
                        next_place_id += 1
                    else:
                        place_id = int(tokens[0])
                        next_place_id = max(place_id, next_place_id) + 1
                    place_name = tokens[1]
                    marking = 1 if "m1" in tokens[2].lower() else 0
                    place = Place(place_id, place_name, [], [], [], marking)
                    P[place_id] = place

            elif state == STATE_TRANS:
                if line == "TP\n":
                    state = STATE_TP
                elif line[0] in numquote:
                    tokens = line.split('"')
                    if tokens[0] == '':
                        trans_id = next_trans_id
                        next_trans_id += 1
                    else:
                        trans_id = int(tokens[0])
                        next_trans_id = max(trans_id, next_trans_id) + 1
                    trans_name = tokens[1]
                    trans = Trans(trans_id, trans_name, [], [], [])
                    T[trans_id] = trans

            elif state == STATE_TP:
                if line == "PT\n":
                    state = STATE_PT
                elif line[0] != '%':
                    (trans_id, place_id) = line.split('<')
                    trans = T[int(trans_id)]
                    place = P[int(place_id.split('v')[0])]
                    trans.post.append(place)
                    place.pre.append(trans)

            elif state == STATE_PT:
                if line == "RA\n":
                    state = STATE_RA
                elif line == "TX\n" or line == "PTP\n" or line == "PPT\n":
                    state = STATE_IGNORE
                elif line[0] != '%':
                    (place_id, trans_id) = line.split('>')
                    trans = T[int(trans_id.split('v')[0])]
                    place = P[int(place_id)]
                    place.post.append(trans)
                    trans.pre.append(place)

            elif state == STATE_RA:
                if line == "TX\n" or line == "PTP\n" or line == "PPT\n":
                    state = STATE_IGNORE
                elif line[0] != '%':
                    (trans_id, place_id) = line.split('<')
                    trans = T[int(trans_id)]
                    place = P[int(place_id.split('v')[0])]
                    trans.ra.append(place)
                    place.ra.append(trans)

            elif state == STATE_IGNORE:
                pass
        
        self.places = P
        self.transitions = T

# Asperix builder from net
def asperize(net, out, show=['event/1', 'cond/1', 'cutoff/1']):
    out.write('% This file is automatically generated from a Petri net.\n'
              '% Any changes to this file will be overwritten by the parser,\n'
              '% once executed again.\n\n')
    transitions = net.transitions.values()
    places = net.places.values()

    out.write('event(0).\n')

    def make_hist(trans):
        return 'e%i(%s)' % (trans.id, ', '.join(
                map(lambda place: 'c%i(H%i)' % (place.id, place.id), trans.pre)))

    # initial marking and concurrency
    m0 = [id for id in net.places if net.places[id].marking > 0]
    for id in m0:
        out.write('cond(c%i(0)).\n' % id)
        for ids in combinations(m0, 2):
            out.write('conc(c%i(0), c%i(0)).\n' % ids)

    # events from their causes and generated conditions
    for trans in transitions:
        # generated events
        conditions = ', '.join(['cond(c%i(H%i))' % (p.id, p.id) for p in trans.pre] + 
                               ['conc(c%i(H%i), c%i(H%i))' % (p1.id, p1.id, p2.id, p2.id)
                                for p1, p2 in combinations(trans.pre, 2)])
        out.write('event(%s) :- %s.\n' % (make_hist(trans), conditions))

        # generated conditions
        produced = ', '.join(['S%i' % p.id for p in trans.pre])
        for place in trans.post:
            out.write('cond(c%i(e%i(%s))) :- event(e%i(%s)), not cutoff(e%i(%s)).\n' %
                      (place.id, trans.id, produced, 
                       trans.id, produced, trans.id, produced))

        # concurrency of postsets
        for p1, p2 in combinations(trans.post, 2):
            out.write('conc(c%i(e%i(C)), c%i(e%i(C))) :- event(e%i(C)).\n' %
                      (p1.id, trans.id, p2.id, trans.id, trans.id))

    # inductive concurrency rules
    for place in places:
        for t in place.pre:
            out.write('conc(c%i(e%i(C)), C1) :- conc(C,C1), event(e%i(C)), C != C1.\n' %
                      (place.id, t.id, t.id))

    # height
    out.write('height(0, 0).\n')

    for trans in transitions:
        hist = make_hist(trans)
        out.write('height(%s, (%s) + 1) :- event(%s), %s.\n' % 
                  (hist, ' max '.join(['L%i' % p.id for p in trans.pre]),
                   hist, ', '.join(['height(H%i, L%i)' % (p.id, p.id) for p in trans.pre])))

    # collect all heights
    out.write('height(L) :- event(H), height(H,L).\n')

    # parikh vector for initial marking
    out.write('parikhLev(p(%s), H, 0) :- event(H).\n' % 
              ', '.join(['e%i(0)' % trans.id for trans in transitions]))
    out.write('parikhLev(p(%s), H, L) :- event(H), height(H, L1), height(L), L1 < L.\n' % 
              ', '.join(['e%i(0)' % trans.id for trans in transitions]))

    # parikhLevels
    def make_vec(n):
        return ', '.join(['e%i(I%i_%i)' % (trans.id, trans.id, n) if n != None else
                          'e%i(I%i)' % (trans.id, trans.id)
                          for trans in transitions])
    vec0 = make_vec(None)
    for trans in transitions:
        event = 'e%i(%s)' % (trans.id, ', '.join([
                    'c%i(H%i)' % (p.id, p.id) for p in trans.pre]))
        parikhs = ', '.join(['parikhLev(p(%s), H%i, L)' % (make_vec(place.id), place.id)
                             for place in trans.pre])
        nums = ', '.join(['I%i = %i' % (t.id, 1 if t == trans else 0)
                          for t in transitions])
        out.write('parikhLev(p(%s), %s, L) :- event(%s), height(%s, L), %s.\n' %
                  (vec0, event, event, event, nums))
        maxs = ', '.join([
                ('I%i = %s' % (t.id, ' max '.join(['I%i_%i' % (t.id, p.id) for p in trans.pre])))
                for t in transitions])
        out.write('parikhLev(p(%s), %s, L) :- height(L), event(%s), height(%s, L1), '
                  'L < L1, %s, %s.\n' %
                  (vec0, event, event, event, parikhs, maxs))

    # parikh sum
    out.write('parikhSum(p(%s), H, 0) :- event(H).\n' % 
              ', '.join(['e%i(0)' % t.id for t in transitions]))
    sums = ', '.join(['I%i = I%i_1 + I%i_2' % (t.id, t.id, t.id) for t in transitions])
    out.write('parikhSum(p(%s), H, L) :- height(L), L > 0, '
              'parikhSum(p(%s), H, L-1), parikhLev(p(%s), H, L), %s.\n' % 
              (vec0, make_vec(1), make_vec(2), sums))

    # parikh finally
    out.write('parikh(p(%s), H) :- event(H), height(H,L), parikhSum(p(%s), H, L).\n' %
              (vec0, vec0))

    # cardinality
    out.write('cardinality(H, I) :- event(H), parikh(%s), I = %s.\n' %
              (vec0, ' + '.join(['I%i' % t.id for t in transitions])))

    # marking of histories
    mark = ', '.join(['c%i(M%i)' % (p.id, p.id) for p in places])
    def make_sum(p):
        return 'M%i = %s%s%s' % (
            p.id, p.marking,
            ''.join([' + I%i' % t1.id for t1 in p.pre]),
            ''.join([' - I%i' % t2.id for t2 in p.post])
            )
    out.write('marking(m(%s), H) :- event(H), parikh(p(%s), H), %s.\n' %
              (mark, vec0, ', '.join([make_sum(p) for p in places])))

    # parikh compare
    for trans in transitions:
        v1 = make_vec(1)
        v2 = make_vec(2)
        eq = ', '.join(['I%i_1 = I%i_2' % (t.id, t.id) 
                        for t in transitions 
                        if t.id < trans.id] + 
                       ['I%i_1 < I%i_2' % (trans.id, trans.id)])
        out.write('less(H1,H2) :- event(H1), event(H2), '
                  'parikh(p(%s), H1), parikh(p(%s), H2), %s.\n' % (v1, v2, eq))

    # cutoffs
    out.write('cutoff(H) :- event(H), event(H1), marking(M, H), '
              'marking(M, H1), less(H1, H).\n\n')

    out.write('#hide.\n')
    for item in show:
        out.write('#show %s.\n' % item)

def build_result(solution, orig_net):
    "ASP output parsing"
    solution = solution.splitlines()[1].split(' ')
    pattern = re.compile(r'(\w([\d]*)\((.*)\))')
    cond_id = 1
    event_id = 1
    conditions = {}
    events = {}

    def get_preds(hist):
        last = 0
        depth = 0
        k = 0
        for c in hist:
            if c == ',' and depth == 0:
                yield (hist[last:k])
                last = k + 1
            elif c == '(':
                depth += 1
            elif c == ')':
                depth -= 1
            k += 1
        yield hist[last:k]

    cutoffs = []
    for line in solution:
        if line.startswith('cond('):
            cond = line[5:-1]
            (full, place_id, args) = pattern.match(cond).groups()
            name = orig_net.places[int(place_id)].name
            conditions[full] = cond = Place(cond_id, name, get_preds(args), [], [], 0)
            cond_id += 1
        elif line.startswith('event('):
            event = line[6:-1]
            if event == '0': continue
            (full, trans_id, args) = pattern.match(event).groups()
            name = orig_net.transitions[int(trans_id)].name
            events[full] = event = Trans(event_id, name, get_preds(args), [], [])
            event_id += 1
        elif line.startswith('cutoff('):
            event = line[7:-1]
            cutoffs.append(event)

    for cutoff in cutoffs:
        events[cutoff].cutoff = True
    del cutoffs

    for cond in conditions.itervalues():
        pre = []
        for event_name in cond.pre:
            if event_name != '0':
                event = events[event_name]
                pre.append(event)
                event.post.append(cond)
        cond.pre = pre

    for event in events.itervalues():
        pre = []
        for cond_name in event.pre:
            cond = conditions[cond_name]
            cond.post.append(event)
        event.pre = pre

    return Net(conditions, events)

def write_dot(out, net):
    """
    Output net in dot format:
    out: any writable IO object
    net: the input Petri net
    """
    out.write("digraph PetriNet {\n")

    out.write("// Places\n")
    for place in net.places.itervalues():
        out.write("p%i [shape=circle label=\"%s\"" % (place.id, place.name))
        if place.marking > 0:
            out.write(" color=green")
        out.write("];\n")
		
    out.write("// Transitions\n")
    for transition in net.transitions.itervalues():
        out.write("t%d [shape=box label=\"%s\"" % (transition.id, transition.name))
        if transition.cutoff:
            out.write(" color=red")
        out.write("];\n")
		
    out.write("// Edges\n")
    for place in net.places.itervalues():
        for transition in place.post:
            out.write("p%d -> t%d;\n" % (place.id, transition.id))
    for transition in net.transitions.itervalues():
        for place in transition.post:
            out.write("t%d -> p%d;\n" % (transition.id, place.id))
        for place in transition.ra:
            out.write("p%d -> t%d [dir=none];\n" % (place.id, transition.id))

    out.write("}\n")

def write_ll(out, net):
    """
    Output net in ll_net format:
    out: any writable IO object
    net: the input Petri net
    """
    out.write("PEP\nPetriBox\nFORMAT_N2\n")

    out.write("PL\n")
    for place in net.places.itervalues():
        out.write('%i"%s"' % (place.id, place.name))
        if place.marking > 0:
            out.write('eM%im%i' % (place.marking, place.marking))
        out.write("\n")
		
    out.write("TR\n")
    for transition in net.transitions.itervalues():
        out.write('%i"%s"\n' % (transition.id, transition.name))
    
    out.write('TP\n')
    for transition in net.transitions.itervalues():
        for place in transition.post:
            out.write("%i < %i\n" % (transition.id, place.id))

    out.write("PT\n")
    for place in net.places.itervalues():
        for transition in place.post:
            out.write("%i > %i\n" % (place.id, transition.id))

    out.write("RA\n")
    for transition in net.transitions.itervalues():
        for place in transition.ra:
            out.write("%i < %i\n" % (place.id, transition.id))

if __name__ == "__main__":
    import os, sys, re
    from optparse import OptionParser

    usage = "usage: %prog [options] filename"
    parser = OptionParser(usage)
    parser.add_option('-d', '--dot', action='store_const', dest='output_fmt', const = 0,
                      help='Output in dot format', default = 0)
    parser.add_option('-l', '--ll', action='store_const', dest='output_fmt', const = 1,
                      help='Output in dot format')
    parser.add_option('-p', '--predicates', action='store_const', dest='output_fmt', const = 2,
                      help='Output solution predicates')
    parser.add_option('-s', '--show', dest='show', default='cond/1:event/1:cutoff/1',
                      help='The predicates to be shown in ASP, colon separated\n'
                      'Default: %default')
    parser.add_option('-a', '--asp', action='store_false', dest='unfold', default = True,
                      help='Don\'t unfold and output the resulting program')
    (options, args) = parser.parse_args()

    if len(args) > 0:
        if args[0] == '-':
            handler = sys.stdin
        else:
            handler = open(args[0], 'r')
        net = Net(fhan=handler)
        if options.unfold:
            (out, result) = os.popen2('asperix')
            asperize(net, out, options.show.split(':'))
            out.close()
            if options.output_fmt == 2:
                for predicate in result.readlines()[1].split(' '):
                    print predicate
            else:
                solution = result.read()
                result.close()
                unfolding = build_result(solution, net)
                if options.output_fmt == 0:
                    write_dot(sys.stdout, unfolding)
                elif options.output_fmt == 1:
                    write_llnet(sys.stdout, unfolding)
        else:
            asperize(net, sys.stdout)
    else:
        parser.print_help()

